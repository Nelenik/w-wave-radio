Initialization:
  let modal = new ModalConstructor(triggerSelectorOrEl, options)
  По умолчанию открытие окна нужно настроить принудительно методом modal.open(). Если нужно, чтобы окно автоматически открывалось при клике на триггер(например содержимое известно и не будет меняться, или на триггере кроме открытия нет других действий), то нужно добавить настройку autoOpen: true;

  - triggerSelectorOrEl - string, селектор или элемент по клику на который открывается окно. (Если окно статическое(скрыто в разметке), то для триггера добавляем - data-path =
  "value", для контента - data-modal="value");
  -options = объект с настройками.

Options:
  -- autoOpen: (boolean, default=false) указываем должно ли окно открываться автоматически плагином. По умолчанию false,  для октытия окна нужно воспользоваться методом modal.open()
  -- isStatic: (boolean, default=false) указываем статичное или динамичное модальное окно;
  -- modalInner: (html/el, default = null), контент модального окна при динамическом создании.(конструктор создает оверлей и обертку контента, кнопку закрытия и сам контент можно добавить в этой настройке);
  -- enableTransition: (boolean, default = true) если true настраивается transition для появления окна. Если false можно настроить анимацию с помощью библиотеки (например GreenSock) В случае сторонней анимации для динамического окна обязательно нужно указать animTime, который будет задержкой при удалении из DOM(значение нужно согласовать со временем анимации библиотеки)
  -- animTime: (ms, default=null) время анимации. Этот параметр нужно указывать при настройке анимации с помощью библиотеки, т.к. он также является задержкой удаления модалки из DOM
  -- easing: (string, default = 'ease') название easing-функции для transition
  -- elemToFocus: (string, default=null) передаем селектор элемента, который должен быть в фокусе при открытии модального окна.Если не задано фокус устанавливается первому фокусируемому элементу в модалке
  //классы
  -- modalCloseBtnClass: (string, default-null) класс кнопки закрытия(если есть)(для динамических окон ее также нужно создать самостоятельно)
  -- modalOverlayClass: (string, default="modal-overlay"),класс оверлея, дефолтный класс добавляется при динамическом создании, для статических окон нужно передать соответствующие классы
  -- modalWrapperClass: (string, default="modal-wrapper"), класс обертки контента
  -- modalOpenClass: (string, default="modal-open"), класс активного класса

Методы:
  --modal.updateInner(html-string/el) - можно заменить/добавить контент динамической модалки, в момент клика по триггеру
  --modal.open() - открывает модалку
  --modal.close() - закрывает модалку

События:
Позволяют сделать что то с окном в момент открытия/закрытия (например анимацию). события всплывают, можно отловить на document, e.target = модальное окно
  --modalOnOpen
  --modalOnClose

Примерный html для статичного окна:
  <button class="trigger" type="button" data-path="1">open </button>
  <div class="overlay" data-modal="1">
    <div class="content-wrapper" >
      <button class="close-btn" type="button">close</button>
  </div>
  </div>

Примечания:
! если окно динамическое, то при создании его содержимого, нужно учесть кнопку закрытия если она нужна и передать ее класс в modalCloseBtnClass. по дефолту окно без кнопки.

!! если в документе есть элементы с position: fixed, то им нужно назначить доп класс "fixed-el". Это нужно чтобы убрать "прыжок" контента при открытии модалки и блокировки скролла.

!!! если в прокете не используется normalize.css необходимо обнулить дефолтные margin у body, если этого не сделать некорректно считается ширина скроллбара и сохраняется "прыжок" контента.

!!!! при открытии окна фокус будет сосредоточен на первом фокусируемом в разметке элементе (для динамического окна это обертка контента) чтобы назначить фокус на желаемый элемент нужно передать соответствующий селектор в elemToFocus.

